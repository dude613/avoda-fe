name: Enhanced PR Analysis with OpenAI

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for more comprehensive diff

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Get changed files
        id: get_files
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const filteredFiles = data.filter(file => 
              !file.filename.endsWith('.json') &&
              !file.filename.endsWith('.lock') &&
              file.filename !== '.gitignore' &&
              file.filename !== '.env' &&
              file.status !== 'removed'  # Skip deleted files
            );
            core.setOutput('changed_files', JSON.stringify(filteredFiles));
            return filteredFiles;

      - name: Analyze Changes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/usr/bin/env python3
          import os
          import json
          import requests
          import sys

          def sanitize_diff(diff):
              """Sanitize and truncate diff to prevent API overload"""
              # Limit diff to 4000 characters
              return diff[:4000]

          def call_openai_api(diff, filename):
              """Call OpenAI API with robust error handling"""
              try:
                  payload = {
                      "model": "gpt-3.5-turbo",
                      "messages": [
                          {
                              "role": "system",
                              "content": "You are a senior code reviewer analyzing a code diff."
                          },
                          {
                              "role": "user",
                              "content": f"Analyze the diff for {filename}:\n\n{diff}"
                          }
                      ],
                      "max_tokens": 500,
                      "temperature": 0.3
                  }
                  
                  headers = {
                      "Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}",
                      "Content-Type": "application/json"
                  }
                  
                  response = requests.post(
                      "https://api.openai.com/v1/chat/completions", 
                      headers=headers, 
                      json=payload
                  )
                  
                  response.raise_for_status()
                  return response.json()['choices'][0]['message']['content']
                  
              except requests.RequestException as e:
                  print(f"API Error for {filename}: {e}")
                  return f"Unable to generate review due to API error: {e}"

          def create_github_review(filename, analysis):
              """Create GitHub PR review comment"""
              try:
                  os.system(f'''
                  gh pr comment ${{ github.event.pull_request.number }} \
                    --body "Code Review for `{filename}`:\n\n{analysis}"
                  ''')
              except Exception as e:
                  print(f"GitHub comment error for {filename}: {e}")

          # Read changed files from GitHub script output
          with open(os.environ['GITHUB_OUTPUT'], 'r') as f:
              for line in f:
                  if line.startswith('changed_files='):
                      changed_files_json = line.split('=', 1)[1].strip()
                      break
              else:
                  print("No changed files found")
                  sys.exit(0)

          # Parse changed files
          try:
              changed_files = json.loads(changed_files_json)
          except json.JSONDecodeError as e:
              print(f"Error parsing changed files: {e}")
              sys.exit(1)

          # Analyze each changed file
          for file_info in changed_files:
              filename = file_info['filename']
              
              try:
                  # Get diff for the file
                  diff = os.popen(f'git diff origin/${{ github.event.pull_request.base.ref }} -- "{filename}"').read()
                  
                  if not diff.strip():
                      print(f"No meaningful diff for {filename}")
                      continue
                  
                  # Sanitize and analyze diff
                  sanitized_diff = sanitize_diff(diff)
                  analysis = call_openai_api(sanitized_diff, filename)
                  
                  # Create GitHub review comment
                  create_github_review(filename, analysis)
                  
              except Exception as e:
                  print(f"Error processing {filename}: {e}")

  cleanup:
    needs: analyze
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clean up temporary files
        run: |
          rm -rf /tmp/diff_analysis_*